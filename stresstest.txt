(b+ 2 2)
(b- 2 2)
(b* 2 2)
(b/ 2 2)
(b= 2 2)
(b< 1 2)
(b> 4 2)
"END OF BASIC OPERATIONS"

(symbol? 'foo)
(symbol? (car '(a b)))
(symbol? "bar")
(symbol? 'nil)
(symbol? '())
(symbol? #f)
"END OF SYMBOLS"

(number? b)
(number? 1)
(number? 'x)
"END OF NUMBER"

(procedure? b+)
(procedure? b-)
(procedure? b*)
(procedure? b/)
(procedure? b<)
(procedure? b=)
"END OF PROCEDURES"

(define a (cons '(1 2 3) '(4 (5))))
(define aa (cons '(1 (2) 3) '((4) (5))))
(define b (b+ 1 1))
(define c (b- 2 1))
(define d (b< 2 1))
(define e (b< 1 2))
(define f (b/ 2 1))
(define g (b* 2 1))
(define h (b+ (b+ 1 1) (b+ 1 1)))
(define i (b+ (b* 2 2) (b* 2 2)))
(define j (b+ (b* 2 2) (b* 2 2)))
(define k (symbol? b))
(define l (symbol? 'x))
(define m (symbol? 1))
(define n (number? 1))
(define o (number? 'c))
(define p (number? '1))
(define po (cons p o))
(define aaa (cons a aa))
(define ab (cons a b))
(define cd (cons c d))
(define mn (cons m n))
(define poaaa (cons po aaa))
(define poaaaab (cons poaaa ab))
(define zzzq (cons '(((#f #f) ((1 2 3) 4 (5)) (1 (2) 3) (4) (5)) ((1 2 3) 4 (5)) 2) poaaaab ))
(define zzzqzzzq (cons zzzq zzzq))
(define zzzqzzzqzzzqzzzq (cons zzzqzzzq zzzqzzzq))
(define ppp '(define (x z) (lambda (+ x z)(1 2))))
(define lamplus ((lambda (y) (b+ y y)) 1))
(define lamstar ((lambda (y) (b* y y)) 1))
(define malformed ((lambda (y) b* y y) 1))
"END OF DEFINES"

a
aa
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
po
aaa
ab
cd
mn
ppp
poaaa
poaaaab
zzzq
zzzqzzzq
zzzqzzzqzzzqzzzq
"undefined variable:"
dddddddddddddddddd
"END OF LITERALS"

"functions:"
(define (x y) (b+ y y))
(define (fun p q)(b* (b+ p q) (b+ p q)))
(define z (b+ 1 1))
(define zz (b+ z z))
(x z)
(fun zz z)

lamplus
lamstar
malformed

"specials"
(quote 1 2)

(define true #t)
(define false #f)

(if (symbol? 'x) 1 0)
(if (symbol? 'x) (b+ 1 1) ( b+ 0 0))
(if (symbol? 1) (b+ 1 1) ( b+ 0 0))

(cond
      ((false) 0)
      ((false) 0)
      ((false) 0)
      ((false) 0)
      ((false) 0)
      ((false) 0)
      ((false) 0)
      ((false) 0)
      ((false) 0)
      ((true) 1)
)

(cond
      ((symbol? 1) 0)
      ((symbol? 'x) 1)
)

(cond
      ((eq? 1 2) 1)
      ((symbol? 'x) 0)
)

"Begins Start"
(begin (symbol? 1) (b+ 1 2))